PROGRAM PageDraw WITH Draw;
PROGRAM PageRefresh WITH Refresh;

	(***************************)
	(*                         *)
	(*     GLOBAL VARIABLES    *)
	(*                         *)
	(***************************)

VAR_GLOBAL

	{G:"Call stack"}
	giStackPtr : INT := -1;
	guiCallStack : ARRAY[ 0..9 ] OF UINT;

	{G:"Back buffer"}
	$giBackBufferCurr : INT := -1;
	$giBackBufferFirst : INT := -1;
	$giBackBufferLast : INT := -1;
	$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;

	{G:"Sets"}
	$PagIndex : UINT;
	$PagNumber : UINT;
	$waitRefresh : BOOL;

	{G:"page1_vars"}
	fbpage1 : Drawpage1;
	fbRefrpage1 : Refrpage1;
	fbpage1String_1 : Static02 := (x:=58, y:=75, pFont:=?EWP2_8x16, bckCol:=12632256, pString:=?kStr00001, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=12632256, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbpage1String_4 : Static02 := (wHnd:=1, x:=54, y:=156, pFont:=?EWP2_8x16, bckCol:=12632256, pString:=?kStr00002, pVisVar:=1, format:=16#0020, bordPts:=0, selForeCol:=12632256, pRefrVar:=0, pSelVar:=0, numChars:=0);
	fbpage1Edit_3 : EditBox03 := (wHnd:=2, x1:=94, y1:=186, x2:=157, y2:=201, pFont:=?EWP2_8x16, bckCol:=32767, bordPts:=1, rw:=TRUE, pVar:=16#00201100, order:=2, pVisVar:=1, foreSelCol:=12632256, refr:=TRUE, type:=tyInt, format:=16#2100000C, pCanSel:=1, pEnumId:=0);
	fbpage1Edit_5 : EditBox03 := (wHnd:=3, x1:=91, y1:=100, x2:=154, y2:=115, pFont:=?EWP2_8x16, bckCol:=65535, bordPts:=1, rw:=TRUE, pVar:=16#00201000, order:=3, pVisVar:=1, foreSelCol:=12632256, refr:=TRUE, type:=tyInt, format:=16#2100000C, pCanSel:=1, pEnumId:=0);

	{G:"Back page manager"}
	fbBackPage : DrawBackPage;

END_VAR

	(***************************)
	(*                         *)
	(*        CONSTANTS        *)
	(*                         *)
	(***************************)

VAR_GLOBAL CONSTANT

	kStr00002 :STRING[18] := 'Relative Humidity';
	kStr00001 :STRING[19] := 'Temperature[deg F]';

END_VAR
VAR_GLOBAL CONSTANT

	{G:"Fonts"}
	EWP2_8x16_len : USINT := 8;
	EWP2_8x16_hei : USINT := 16;
	EWP2_8x16_offs : USINT := 0;
	EWP2_8x16 AT %MB1000.0 : ARRAY[ 0..2095 ] OF BYTE := 254,8,16,0,95,2,0,32,0,33,0,34,0,35,0,36,
				0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,
				0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,
				0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,
				0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,
				0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,
				0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,
				0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,
				0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,
				0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,
				0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,
				0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,
				0,125,0,126,7(0),16,3(0),32,3(0),48,3(0),64,3(0),80,3(0),96,
				3(0),112,3(0),128,3(0),144,3(0),160,3(0),176,3(0),192,3(0),208,3(0),224,
				3(0),240,0,0,1,3(0),1,16,0,0,1,32,0,0,1,48,
				0,0,1,64,0,0,1,80,0,0,1,96,0,0,1,112,
				0,0,1,128,0,0,1,144,0,0,1,160,0,0,1,176,
				0,0,1,192,0,0,1,208,0,0,1,224,0,0,1,240,
				0,0,2,3(0),2,16,0,0,2,32,0,0,2,48,0,0,
				2,64,0,0,2,80,0,0,2,96,0,0,2,112,0,0,
				2,128,0,0,2,144,0,0,2,160,0,0,2,176,0,0,
				2,192,0,0,2,208,0,0,2,224,0,0,2,240,0,0,
				3,3(0),3,16,0,0,3,32,0,0,3,48,0,0,3,64,
				0,0,3,80,0,0,3,96,0,0,3,112,0,0,3,128,
				0,0,3,144,0,0,3,160,0,0,3,176,0,0,3,192,
				0,0,3,208,0,0,3,224,0,0,3,240,0,0,4,3(0),
				4,16,0,0,4,32,0,0,4,48,0,0,4,64,0,0,
				4,80,0,0,4,96,0,0,4,112,0,0,4,128,0,0,
				4,144,0,0,4,160,0,0,4,176,0,0,4,192,0,0,
				4,208,0,0,4,224,0,0,4,240,0,0,5,3(0),5,16,
				0,0,5,32,0,0,5,48,0,0,5,64,0,0,5,80,
				0,0,5,96,0,0,5,112,0,0,5,128,0,0,5,144,
				0,0,5,160,0,0,5,176,0,0,5,192,0,0,5,208,
				0,0,5,224,19(0),252,252,6(0),13,13,5(0),60,60,0,60,60,
				9(0),32,32,224,252,60,224,252,60,1,15,15,1,15,15,1,
				1,0,0,56,124,254,254,132,4,0,0,8,8,31,31,15,
				7,56,124,68,252,248,248,156,132,0,8,14,7,7,15,8,
				15,0,0,184,252,228,188,152,192,0,7,15,8,9,15,7,
				13,3(0),60,60,14(0),192,240,56,12,4,3(0),3,15,28,48,32,
				0,4,12,56,240,192,3(0),32,48,28,15,3,3(0),40,56,124,
				124,56,40,10(0),3(128),240,240,128,128,4(0),7,7,12(0),16,28,12,
				13(0),5(1),12(0),12,12,6(0),192,240,60,12,0,0,12,15,3,5(0),
				240,248,204,196,204,248,240,0,3,7,12,8,12,7,3,0,
				8,12,252,252,4(0),8,8,15,15,8,8,0,0,3(4),132,252,
				120,0,0,12,14,11,9,8,8,0,0,4,68,68,228,188,
				24,0,0,3(8),12,7,3,3(0),192,240,60,252,252,0,0,3,
				3,2,2,15,15,2,0,0,124,124,68,68,196,132,0,0,
				4(8),15,7,0,240,248,204,68,68,196,128,0,3,7,12,8,
				8,15,7,0,3(4),196,244,60,12,0,0,8,14,7,1,3(0),
				24,188,228,68,228,188,24,0,7,15,3(8),15,7,0,120,252,
				132,132,204,248,240,0,0,3(8),12,7,3,3(0),96,96,6(0),12,
				12,6(0),96,96,5(0),16,28,12,5(0),128,192,64,96,48,16,3(0),
				1,1,3,6,4,0,7(32),0,7(1),0,0,16,48,96,64,192,
				128,0,0,4,6,3,1,1,3(0),8,140,196,68,124,56,3(0),
				13,13,3(0),240,248,204,228,228,236,248,240,7,15,25,4(19),1,
				0,128,248,124,124,248,128,0,12,15,3,1,1,3,15,12,
				0,252,252,3(68),252,184,0,15,15,3(8),15,7,0,240,248,12,
				4,4,12,8,0,3,7,12,8,8,12,4,0,252,252,4,
				4,12,248,240,0,15,15,8,8,12,7,3,0,252,252,5(68),
				0,15,15,5(8),0,252,252,5(68),0,15,15,6(0),240,248,12,132,
				132,140,136,0,3,7,12,8,8,15,7,0,252,252,3(64),252,
				252,0,15,15,3(0),15,15,0,4,4,252,252,4,4,0,0,
				8,8,15,15,8,8,6(0),252,252,0,0,4(8),15,7,0,0,
				252,252,192,224,48,24,12,0,15,15,0,1,3,6,12,0,
				252,252,6(0),15,15,5(8),0,252,252,120,96,120,252,252,0,15,
				15,3(0),15,15,0,252,252,120,224,128,252,252,0,15,15,0,
				1,7,15,15,0,240,248,12,4,12,248,240,0,3,7,12,
				8,12,7,3,0,252,252,3(68),124,56,0,15,15,6(0),240,248,
				12,4,12,248,240,0,3,7,12,24,60,39,35,0,252,252,
				68,196,196,124,56,0,15,15,0,0,3,7,12,0,56,124,
				68,196,132,140,8,0,4,12,3(8),15,7,3(4),252,252,3(4),3(0),
				15,15,4(0),252,252,3(0),252,252,0,7,15,3(8),15,7,12,124,
				240,128,128,240,124,12,0,0,7,15,15,7,0,0,252,252,
				128,224,224,128,252,252,3,15,15,3,3,15,15,3,4,28,
				56,224,224,56,28,4,8,14,7,1,1,7,14,8,4,28,
				56,224,224,56,28,4,3(0),15,15,4(0),4,4,132,228,116,28,
				12,0,12,14,11,9,3(8),3(0),252,252,4,4,4(0),63,63,32,
				32,0,0,12,60,240,192,7(0),3,15,12,0,0,4,4,252,
				252,4(0),32,32,63,63,4(0),64,112,56,12,12,56,112,16(0),8(64),
				3(0),4,12,8,11(0),64,96,3(32),224,192,0,6,15,9,9,13,
				15,15,0,252,252,96,32,96,192,128,0,15,15,12,8,12,
				7,3,0,128,192,96,4(32),0,3,7,12,4(8),0,128,192,96,
				32,96,252,252,0,3,7,12,8,12,15,15,0,128,192,96,
				32,96,192,128,0,3,7,13,4(9),0,32,32,248,252,3(36),3(0),
				15,15,4(0),192,224,32,32,224,224,32,0,61,127,74,74,75,
				121,48,0,252,252,96,32,32,224,192,0,15,15,3(0),15,15,
				0,0,32,32,228,228,6(0),15,15,4(0),32,32,228,228,3(0),3(64),
				127,63,3(0),252,252,128,192,96,32,0,0,15,15,1,3,6,
				12,8,0,4,4,252,252,6(0),15,15,8,8,0,224,224,32,
				224,224,32,224,192,15,15,0,15,15,0,15,15,0,224,224,
				96,32,32,224,192,0,15,15,3(0),15,15,0,192,224,3(32),224,
				192,0,7,15,3(8),15,7,0,224,224,96,32,96,192,128,0,
				127,127,12,8,12,7,3,0,128,192,96,32,96,224,224,0,
				3,7,12,8,12,127,127,0,0,224,224,96,3(32),0,0,15,
				15,5(0),192,224,5(32),0,8,4(9),15,6,0,0,32,248,248,32,
				32,4(0),7,15,3(8),0,224,224,3(0),224,224,0,7,15,8,8,
				12,15,15,32,224,192,0,0,192,224,32,0,1,7,14,14,
				7,1,0,224,224,0,128,128,0,224,224,3,15,15,3,3,
				15,15,3,0,32,96,192,128,192,96,32,0,8,12,7,3,
				7,12,8,32,224,192,0,0,192,224,32,64,64,103,63,31,
				7,3(0),3(32),160,224,96,32,0,8,12,15,11,3(8),0,0,128,
				248,124,4,5(0),31,63,32,5(0),252,252,6(0),63,63,6(0),4,124,
				248,128,4(0),32,63,31,3(0),4(128),0,0,128,1,1,0,0,4(1);

	{G:"Keys"}
	kKEY_Enter : USINT := 13;
	kKEY_Esc : USINT := 27;
	kKEY_Del : USINT := 127;
	kKEY_Left : USINT := 8;
	kKEY_Right : USINT := 12;
	kKEY_ArrowUp : USINT := 11;
	kKEY_ArrowDw : USINT := 10;
	kKEY_Back : USINT := 4;
	kKEY_Tab : USINT := 9;
	kKEY_Shift : USINT := 6;
	kKEY_Caps : USINT := 5;
	kKEY_Confirm : USINT := 14;
	kKEY_VK_F1 : USINT := 30;
	kKEY_VK_F2 : USINT := 31;
	kKEY_VK_F3 : USINT := 32;
	kKEY_VK_F4 : USINT := 33;
	kKEY_VK_F5 : USINT := 34;
	kKEY_VK_F6 : USINT := 35;
	kKEY_VK_F7 : USINT := 36;
	kKEY_VK_F8 : USINT := 37;
	kKEY_VK_F9 : USINT := 38;
	kKEY_VK_F10 : USINT := 39;

	{G:"Data types"}
	tyUndefined : USINT := 19;
	tyBool : USINT := 1;
	tySInt : USINT := 2;
	tyInt : USINT := 5;
	tyDInt : USINT := 9;
	tyLInt : USINT := 12;
	tyUSInt : USINT := 3;
	tyUInt : USINT := 6;
	tyUDInt : USINT := 10;
	tyULInt : USINT := 13;
	tyReal : USINT := 15;
	tyLReal : USINT := 16;
	tyByte : USINT := 4;
	tyWord : USINT := 7;
	tyDWord : USINT := 11;
	tyLWord : USINT := 14;
	tyString : USINT := 17;

	{G:"Messages"}
	kWM_NULL : UINT := 0;
	kWM_KEY : UINT := 1;
	kWM_MSG : UINT := 2;
	kWM_SELECT : UINT := 3;
	kWM_PUSH : UINT := 4;
	kEV_WM_TEXTSELECT : UINT := 5;
	kEV_WM_OPENPAGE : UINT := 6;
	kEV_WM_CLOSEPAGE : UINT := 7;
	kEV_WM_CHANGESETPAGE : UINT := 8;

	{G:"Access modes"}
	kACS_IDLE : USINT := 0;
	kACS_INIT : USINT := 1;
	kACS_PRINT : USINT := 2;
	kACS_SELECT : USINT := 3;
	kACS_MODIFY : USINT := 4;
	kACS_DELETE : USINT := 5;
	kACS_QUERY : USINT := 6;
	kACS_BCKQUERY : USINT := 7;
	kACS_CLOSE : USINT := 8;
	kACS_OPEN : USINT := 9;

	{G:"Parameters and device"}
	kCOMM_PROTO_ID_LOCAL : USINT := 1;
	kCOMM_PROTO_ID_MODBUS_RTU : USINT := 2;
	kCOMM_PROTO_ID_MODBUS_TCP : USINT := 3;
	kCOMM_PROTO_ID_CANOPEN : USINT := 4;

	{G:"Button types"}
	kBTN_TYPE_NORMAL : USINT := 0;
	kBTN_TYPE_TOGGLE : USINT := 1;

	{G:"Resources"}
	kLangBaseLanguage : UDINT := 0;


	(*** Enumeratives: ***)

	{G:"Parameters"}
	kPAR_MSG_NOTFOUND : UINT := 103;
	kPAR_MSG_SYSERR : UINT := 106;
	kPAR_ERR_OK : UINT := 0;
	kPAR_ERR_NOTFOUND : UINT := 1;
	kPAR_ERR_INVTYPE : UINT := 3;

END_VAR

	(***************************)
	(*                         *)
	(*        PROGRAMS         *)
	(*                         *)
	(***************************)

PROGRAM PageDraw

	VAR
	res : USINT;
	END_VAR

	{CODE:ST}
	(* Locking the video *)
	res := Video_Lock( res );

	(* The resource bitmaps color depth is supported... *)
	res := Video_SetUseBitmapsColorDepth( TRUE );

	(* INIT HMI ENVIRONMENT *)
	res := Video_InitHMI_ZOrder( TRUE );

	(* Switching on the LCD *)
	res := Video_Switch( TRUE );

	(* Initializing the length of the call stack *)
	giStackPtr := 0;

	(* Initializing the back circular buffer indexes *)
	$giBackBufferCurr := -1;
	$giBackBufferFirst := -1;
	$giBackBufferLast := -1;

	(* Declaring the code of the keys for driving the editing mode *)
	res := Video_SetEditKey( 0, kKEY_Enter );
	res := Video_SetEditKey( 1, kKEY_Esc );
	res := Video_SetEditKey( 2, kKEY_Del );
	res := Video_SetEditKey( 3, kKEY_Left );
	res := Video_SetEditKey( 4, kKEY_Right );
	res := Video_SetEditKey( 5, kKEY_ArrowUp );
	res := Video_SetEditKey( 6, kKEY_ArrowDw );
	res := Video_SetEditKey( 7, kKEY_Back );
	res := Video_SetEditKey( 8, kKEY_Tab );
	res := Video_SetEditKey( 9, kKEY_Shift );
	res := Video_SetEditKey( 10, kKEY_Caps );
	res := Video_SetEditKey( 11, kKEY_Confirm );

	(* *** DECLARING THE RESOURCES *** *)
	res := Video_LoadLanguage( 0, 0 );

	(* Declaring the imported fonts *)
	res := Video_AddFontUnicode( ?EWP2_8x16, EWP2_8x16_len, EWP2_8x16_hei );

	(* Declaring the system attributes of windows *)
	res := Video_SetWndSysProps( ?EWP2_8x16, 12632256, 0 );

	(* *** INITIALIZING THE OBJECTS OF PAGE 'page1' *** *)

	(* Init the set elements *)
	guiCallStack[ giStackPtr ] := 0;
	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbpage1();


		END_CASE;


	END_WHILE;


END_PROGRAM

PROGRAM PageRefresh

VAR
res : USINT;
END_VAR

	{CODE:ST}
	(* Wait for the PageDraw to start *)
	WHILE giStackPtr < 0 DO
		res := Video_Sleep(50);
	END_WHILE;

	WHILE TRUE DO
		CASE guiCallStack[ giStackPtr ] OF

			0:
				fbRefrpage1();


		END_CASE;

		res := Video_Sleep( 50 );

	END_WHILE;


END_PROGRAM

	(***************************)
	(*                         *)
	(*  ALARM PAGE F. BLOCKS   *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK DrawBackPage

	VAR_INPUT
		IsOpening : BOOL;
		CurrPageId : UINT;
	END_VAR
	VAR_OUTPUT
		BackPageId : UINT;
	END_VAR
	VAR_EXTERNAL
		$giBackBufferCurr : INT;
		$giBackBufferFirst : INT;
		$giBackBufferLast : INT;
		$guiBackBuffer : ARRAY[ 0..9 ] OF UINT;
	END_VAR
	{CODE:ST}

	IF IsOpening THEN

		(* Entering page *)

		(* Save this page's ID into circular back buffer *)
		$giBackBufferCurr := $giBackBufferCurr + 1;
		IF $giBackBufferCurr >= 10 THEN
			$giBackBufferCurr := 0;
		END_IF;
		$guiBackBuffer[ $giBackBufferCurr ] := CurrPageId;
		IF $giBackBufferFirst = -1 THEN
			$giBackBufferFirst := 0;
		ELSIF $giBackBufferCurr = $giBackBufferFirst AND $giBackBufferFirst <> $giBackBufferLast THEN
			$giBackBufferFirst := $giBackBufferFirst + 1;
			IF $giBackBufferFirst = 10 THEN
				$giBackBufferFirst := 0;
			END_IF;
		END_IF;

		(* Set last page's ID *)
		IF $giBackBufferCurr = $giBackBufferFirst THEN
			$giBackBufferLast := -1;
		ELSIF $giBackBufferCurr = 0 AND $giBackBufferFirst <> 9 THEN
			$giBackBufferLast := 9;
		ELSIF $giBackBufferCurr <> $giBackBufferFirst THEN
			$giBackBufferLast := $giBackBufferCurr - 1;
		ELSE
			$giBackBufferLast := -1;
		END_IF;
		IF $giBackBufferLast <> -1 THEN
			BackPageId := $guiBackBuffer[$giBackBufferLast];
		ELSE
			BackPageId := 16#FFFF;
		END_IF;

	ELSE

		(* Closing page *)
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;
		$giBackBufferCurr := $giBackBufferCurr - 1;
		IF $giBackBufferCurr < 0 THEN
			$giBackBufferCurr := 9;
		END_IF;

	END_IF;

	END_FUNCTION_BLOCK

	(***********************************)
	(*                                 *)
	(* EXPRESSIONS RESOLVER F. BLOCKS  *)
	(*                                 *)
	(***********************************)

	(***************************)
	(*                         *)
	(* PAGE-DRAWING F. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK Drawpage1

	VAR_OUTPUT
	uiOutVar : UINT;
	END_VAR

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbBackPage : DrawBackPage;
	fbpage1String_1 : Static02;
	fbpage1String_4 : Static02;
	fbpage1Edit_3 : EditBox03;
	fbpage1Edit_5 : EditBox03;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	bStatRedrw : BOOL;
	bMapsReset : BOOL;
	iNextSel : INT;
	$Set_IndexVisEl : UINT;
	$Set_CycleRefresh : UINT;
	$Set_PtrBoolVis : @BOOL;
	$Set_VisEl : BOOL;
	$Set_IndexPageInSet : UINT;
	$Set_ForcePageReload : BOOL;
	$Set_NextPage : BOOL;
	$Set_PrevPage : BOOL;
	$Set_LocalSetPagNumber: UINT;
	$Set_NumVisEl: UINT;
	$Set_LastFirstEl: INT;
	udiev : UDINT;
	ev : UINT;
	key : USINT;
	x1 : UINT;
	y1 : UINT;
	x2 : UINT;
	y2 : UINT;
	wParam : UINT;
	END_VAR

	{CODE:ST}

	(* Writing this page's ID to the top of the callstack *)
	guiCallStack[ giStackPtr ] := 16#00;

	(* Manage back page index for opening page *)
	fbBackPage.IsOpening := TRUE;
	fbBackPage.CurrPageId := 16#00;
	fbBackPage();


	(* Flag of waiting for refresh task *)
	$waitRefresh := TRUE;

	(* Resetting the object map *)
	res := Video_ResetMaps( 16#00 );

	(* Setting flags: this page is to be drawn *)
	bStatRedrw := TRUE;
	bMapsReset := TRUE;

	(* The area to be cleared is the area of the entire page *)
	x1:= 0;
	y1:= 0;
	x2:= 239;
	y2:= 319;

	(* Unlocking the video *)
	res := Video_Unlock( res );

	WHILE TRUE DO

		(* Locking the video *)
		res := Video_Lock( res );

		(* Initializing the page *)
		res := Video_InitPage( 0, 0, 239, 319, ?' ', 16#0003 );

		(* Setting the page colors *)
		res := Video_SetPageColors( 0, 12632256 );

		IF bStatRedrw THEN

			(* *** CLEARING PAGE AREA *** *)
			res := Video_ClrRect( x1, y1, x2, y2 );

		END_IF;

		IF bMapsReset THEN

			(* Resetting all maps *)
			res := Video_ResetMaps( 16#FF );

			(* *** DRAW PAGE CONTROLS *** *)

			(* *** PAGE SECTION *** *)

			(* *** DRAW CONTROLS *** *)
			fbpage1String_1.accMode := kACS_INIT;
			fbpage1String_1();
			fbpage1String_1.accMode := kACS_PRINT;
			fbpage1Edit_3.accMode := kACS_INIT;
			fbpage1Edit_3();
			fbpage1Edit_3.accMode := kACS_PRINT;
			fbpage1String_4.accMode := kACS_INIT;
			fbpage1String_4();
			fbpage1String_4.accMode := kACS_PRINT;
			fbpage1Edit_5.accMode := kACS_INIT;
			fbpage1Edit_5();
			fbpage1Edit_5.accMode := kACS_PRINT;

		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Reset the flags for page redraw request *)
		bStatRedrw := FALSE;
		bMapsReset := FALSE;

		(* *** EVENTS HANDLING *** *)
		WHILE NOT bStatRedrw DO

			(* the drawing task wait the refreshing task *)
			IF $waitRefresh THEN
				res := Video_Sleep( 50 );
			ELSE

				(* Retrieving events *)
				udiev := Video_GetEvent( res );
				(* Extracting the event code *)
				ev := TO_UINT(udiev);

				CASE ev OF

				(* Key-related events handling: *)
				kWM_KEY:

					key := TO_USINT(SHR(udiev, 16));

				(* Selecting a control: *)
				kWM_SELECT:

					(* Extracting the index of the edit box clicked *)
					iNextSel := TO_INT(SHR(udiev, 16));

					CASE iNextSel OF

						2,3:
							REPEAT

							(* Entering the edit mode *)
							res := Video_EnterEdit( TO_UINT( iNextSel ) );

							IF res = kKEY_ArrowUp THEN

								iNextSel := TO_INT( Video_NextEdit( TRUE ) );
								IF iNextSel > -1 THEN
									res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
								END_IF;

							ELSIF res = kKEY_ArrowDw THEN

								iNextSel := TO_INT( Video_PrevEdit( TRUE ) );
								IF iNextSel > -1 THEN
									res := Video_SendEvent( kWM_SELECT, TO_UINT(iNextSel) );
								END_IF;

							END_IF;

							UNTIL res <> kKEY_Confirm 
							END_REPEAT;

							IF res <> 255 THEN
								(* The area to be cleared is the area of the entire screen (without system bar)*)
								x1:= 0;
								y1:= 0;
								x2:= 239;
								y2:= 319;
								bMapsReset := TRUE;
								bStatRedrw := TRUE;
							END_IF;

					END_CASE;

					END_CASE;
				END_IF;

			END_WHILE;

		END_WHILE;

	END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* REFRESHING FUN. BLOCKS  *)
	(*                         *)
	(***************************)

FUNCTION_BLOCK Refrpage1

	VAR_EXTERNAL
	guiCallStack : ARRAY[ 0..9 ] OF UINT;
	giStackPtr : INT;
	fbpage1String_1 : Static02;
	fbpage1String_4 : Static02;
	fbpage1Edit_3 : EditBox03;
	fbpage1Edit_5 : EditBox03;
	$waitRefresh : BOOL;
	END_VAR

	VAR
	res : USINT;
	pagID : UINT;
	n : USINT;
	iSP : INT;
	pDC : UDINT;
	rx1 : UINT;
	ry1 : UINT;
	rx2 : UINT;
	ry2 : UINT;
	END_VAR

	{CODE:ST}

	REPEAT

		(* Locking the video *)
		res := Video_Lock( res );

		(* Testing if page has changed *)
		pagID := guiCallStack[ giStackPtr ];

		IF pagID = 16#00 THEN

			(* the refresh task is arrived *)
			$waitRefresh := FALSE;

			(* *** REFRESH PAGE CONTROLS *** *)

			(* Update refresh flags for page controls *)
			res := Video_UpdatePageControls( TRUE );


			(* *** REFRESHING BACKGROUND ITEMS *** *)
			(* Cursor across the call stack *)
			iSP := giStackPtr;

			(* *** REFRESHING PARENT BACKGROUND ITEMS *** *)

			
		END_IF;

		(* Unlocking the video *)
		res := Video_Unlock( res );

		(* Suspending the task *)
		res := Video_Sleep( 50 );

	UNTIL pagID <> 16#00
	END_REPEAT;

END_FUNCTION_BLOCK

	(***************************)
	(*                         *)
	(* PARAMETER  FUN. BLOCKS  *)
	(*                         *)
	(***************************)

